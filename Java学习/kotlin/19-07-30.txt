19-07-30

关于lambda的使用：
	语法：
	1. 无参数的情况：
	val/var 变量名 = { 操作的代码 }

	2. 有参数的情况：
	val/var 变量名 : (参数的类型，参数类型，...) -> 返回值类型 = {参数1，参数2，... -> 操作参数的代码 }
	可等价于
	// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。
	val/var 变量名 = { 参数1 ： 类型，参数2 : 类型, ... -> 操作参数的代码 }

	3. lambda表达式作为函数中的参数的时候，这里举一个例子：
	fun test(a : Int, 参数名 : (参数1 ： 类型，参数2 : 类型, ... ) -> 表达式返回类型){
        ...
	}

lambda特点：
1、lambda表达式总是被大括号括着。
2、定义完整的Lambda表达式如上面实例中的语法2，它有其完整的参数类型标注，与表达式返回值。
   当我们把一些类型标注省略的情况下，就如上面实例中的语法2的另外一种类型。当它推断出的返回值类型不为'Unit'时，它的返回值即为->符号后面代码的最后一个（或只有一个）表达式的类型。
3、在上面例子中语法3的情况表示为：高阶函数，当Lambda表达式作为其一个参数时，只为其表达式提供了参数类型与返回类型，所以，我们在调用此高阶函数的时候我们要为该Lambda表达式写出它的具体实现。

关于it
1、it并不是Kotlin中的一个关键字(保留字)。
2、it是在当一个高阶函数中Lambda表达式的参数只有一个的时候可以使用it来使用此参数。it可表示为单个参数的隐式名称，是Kotlin语言约定的。

关于_
在使用Lambda表达式的时候，可以用下划线(_)表示未使用的参数，表示不处理这个参数。

filter的使用：filter { it % 2 == 1 }filter后面加过滤条件


let的使用：返回最后一条语句，it表示引用对象
fun main(args: Array<String>) {
    val list: MutableList<String> = mutableListOf("A","B","C")
    val change: Any
    change = list.let {
        it.add("D")
        it.add("E")
        it.size
    }
    println("list = $list")  //打出abcde
    println("change = $change") //打出5
}